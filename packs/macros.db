{"name":"Roll Perception","permission":{"default":0,"vK8vWPb3P1Ja5a6X":3},"type":"script","flags":{},"scope":"global","command":"let actors = [];\r\n// getting all actors of selected tokens\r\nfor(let id in canvas.tokens._controlled){\r\n  actors.push(canvas.tokens._controlled[id].actor);\r\n}\r\n// if there are no selected tokens, get the actors the actors that represent active players\r\nif(actors.length<1) {\r\n  for(let id in game.users.entities) {\r\n    if(game.users.entities[id].active){\r\n\t  if(game.users.entities[id].character !== null) {\r\n\t    actors.push(game.users.entities[id].character)\r\n  \t  }\t\t\t\r\n\t}\r\n  }\r\n}\r\n\r\n// roll for every actor\r\nlet messageContent = '';\r\nfor(let actor of actors) {\r\n  let modifier = actor.data.data.skills.prc.mod; // this is total bonus for perception (abilitie mod + proficiency)\r\n  let result = new Roll(`1d20+${modifier}`).roll().total; // rolling the formula\r\n  messageContent += `${actor.name} rolled <b>${result}</b> for perception<br>`; // creating the output string\r\n}\r\n\r\n// create the message\r\nif(messageContent !== '') {\r\n  let chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: messageContent,\r\n    whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n  };\r\n  ChatMessage.create(chatData, {});\r\n}","author":"vK8vWPb3P1Ja5a6X","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"IvT5flbl21iCQINW"}
{"name":"Token Vision","permission":{"default":0,"vK8vWPb3P1Ja5a6X":3},"type":"script","flags":{},"scope":"global","command":"let applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Vision Configuration`,\r\n  content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Vision Type:</label>\r\n        <select id=\"vision-type\" name=\"vision-type\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"dim0\">Self</option>\r\n          <option value=\"dim30\">Darkvision (30 ft)</option>\r\n          <option value=\"dim60\">Darkvision (60 ft)</option>\r\n          <option value=\"dim90\">Darkvision (90 ft)</option>\r\n          <option value=\"dim120\">Darkvision (120 ft)</option>\r\n          <option value=\"dim150\">Darkvision (150 ft)</option>\r\n          <option value=\"dim180\">Darkvision (180 ft)</option>\r\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Light Source:</label>\r\n        <select id=\"light-source\" name=\"light-source\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"none\">None</option>\r\n          <option value=\"candle\">Candle</option>\r\n          <option value=\"lamp\">Lamp</option>\r\n          <option value=\"bullseye\">Lantern (Bullseye)</option>\r\n          <option value=\"hooded-dim\">Lantern (Hooded - Dim)</option>\r\n          <option value=\"hooded-bright\">Lantern (Hooded - Bright)</option>\r\n          <option value=\"light\">Light (Cantrip)</option>\r\n          <option value=\"torch\">Torch</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\r\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\r\n        let dimSight = 0;\r\n        let brightSight = 0;\r\n        let dimLight = 0;\r\n        let brightLight = 0;\r\n        let lightAngle = 360;\r\n        let lockRotation = token.data.lockRotation;\r\n        // Get Vision Type Values\r\n        switch (visionType) {\r\n          case \"dim0\":\r\n            dimSight = 0;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim30\":\r\n            dimSight = 30;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim60\":\r\n            dimSight = 60;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim90\":\r\n            dimSight = 90;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim120\":\r\n            dimSight = 120;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim150\":\r\n            dimSight = 150;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim180\":\r\n            dimSight = 180;\r\n            brightSight = 0;\r\n            break;\r\n          case \"bright120\":\r\n            dimSight = 0;\r\n            brightSight= 120;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimSight = token.data.dimSight;\r\n            brightSight = token.data.brightSight;\r\n        }\r\n        // Get Light Source Values\r\n        switch (lightSource) {\r\n          case \"none\":\r\n            dimLight = 0;\r\n            brightLight = 0;\r\n            break;\r\n          case \"candle\":\r\n            dimLight = 10;\r\n            brightLight = 5;\r\n            break;\r\n          case \"lamp\":\r\n            dimLight = 45;\r\n            brightLight = 15;\r\n            break;\r\n          case \"bullseye\":\r\n            dimLight = 120;\r\n            brightLight = 60;\r\n            lockRotation = false;\r\n            lightAngle = 52.5;\r\n            break;\r\n          case \"hooded-dim\":\r\n            dimLight = 5;\r\n            brightLight = 0;\r\n            break;\r\n          case \"hooded-bright\":\r\n            dimLight = 60;\r\n            brightLight = 30;\r\n            break;\r\n          case \"light\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"torch\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimLight = token.data.dimLight;\r\n            brightLight = token.data.brightLight;\r\n            lightAngle = token.data.lightAngle;\r\n            lockRotation = token.data.lockRotation;\r\n        }\r\n        // Update Token\r\n        console.log(token);\r\n        token.update({\r\n          vision: true,\r\n          dimSight: dimSight,\r\n          brightSight: brightSight,\r\n          dimLight: dimLight,\r\n          brightLight:  brightLight,\r\n          lightAngle: lightAngle,\r\n          lockRotation: lockRotation\r\n        });\r\n      }\r\n    }\r\n  }\r\n}).render(true);","author":"vK8vWPb3P1Ja5a6X","img":"icons/svg/fire.svg","actorIds":[],"_id":"gM7hgxYHaFgQux1o"}
{"name":"Get PC Passive Perception","permission":{"default":0,"vK8vWPb3P1Ja5a6X":3},"type":"script","flags":{},"scope":"global","command":"let actors = game.actors.entities.filter(e=> e.data.type==='character');\r\n\r\n\r\n// pull each player's passive perception\r\nlet messageContent = '';\r\nlet messageHeader = '<b>Passive Perception</b><br>';\r\nfor(let actor of actors) {\r\n  let modifier = actor.data.data.skills.prc.mod; // this is total bonus for perception (abilitie mod + proficiency)\r\n  let result = 10 + modifier; // this gives the passive perception\r\n  messageContent += `${actor.name} <b>${result}</b><br>`; // creating the output string\r\n}\r\n\r\n// create the message\r\nif(messageContent !== '') {\r\n  let chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: messageHeader + messageContent,\r\n    whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n  };\r\n  ChatMessage.create(chatData, {});\r\n}","author":"vK8vWPb3P1Ja5a6X","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"kOsaKCDTbrNpYhOI"}
